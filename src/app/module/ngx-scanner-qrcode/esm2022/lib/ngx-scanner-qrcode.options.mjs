export var ScannerQRCodeSymbolType;
(function (ScannerQRCodeSymbolType) {
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_NONE"] = 0] = "ScannerQRCode_NONE";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_PARTIAL"] = 1] = "ScannerQRCode_PARTIAL";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_EAN2"] = 2] = "ScannerQRCode_EAN2";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_EAN5"] = 5] = "ScannerQRCode_EAN5";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_EAN8"] = 8] = "ScannerQRCode_EAN8";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_UPCE"] = 9] = "ScannerQRCode_UPCE";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_ISBN10"] = 10] = "ScannerQRCode_ISBN10";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_UPCA"] = 12] = "ScannerQRCode_UPCA";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_EAN13"] = 13] = "ScannerQRCode_EAN13";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_ISBN13"] = 14] = "ScannerQRCode_ISBN13";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_COMPOSITE"] = 15] = "ScannerQRCode_COMPOSITE";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_I25"] = 25] = "ScannerQRCode_I25";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_DATABAR"] = 34] = "ScannerQRCode_DATABAR";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_DATABAR_EXP"] = 35] = "ScannerQRCode_DATABAR_EXP";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_CODABAR"] = 38] = "ScannerQRCode_CODABAR";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_CODE39"] = 39] = "ScannerQRCode_CODE39";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_PDF417"] = 57] = "ScannerQRCode_PDF417";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_QRCODE"] = 64] = "ScannerQRCode_QRCODE";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_SQCODE"] = 80] = "ScannerQRCode_SQCODE";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_CODE93"] = 93] = "ScannerQRCode_CODE93";
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_CODE128"] = 128] = "ScannerQRCode_CODE128";
    /*
     * Please see _ScannerQRCode_get_symbol_hash() if adding
     * anything after 128
     */
    /** mask for base symbol type.
     * @deprecated in 0.11, remove this from existing code
     */
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_SYMBOL"] = 255] = "ScannerQRCode_SYMBOL";
    /** 2-digit add-on flag.
     * @deprecated in 0.11, a ::ScannerQRCode_EAN2 component is used for
     * 2-digit GS1 add-ons
     */
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_ADDON2"] = 512] = "ScannerQRCode_ADDON2";
    /** 5-digit add-on flag.
     * @deprecated in 0.11, a ::ScannerQRCode_EAN5 component is used for
     * 5-digit GS1 add-ons
     */
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_ADDON5"] = 1280] = "ScannerQRCode_ADDON5";
    /** add-on flag mask.
     * @deprecated in 0.11, GS1 add-ons are represented using composite
     * symbols of type ::ScannerQRCode_COMPOSITE; add-on components use ::ScannerQRCode_EAN2
     * or ::ScannerQRCode_EAN5
     */
    ScannerQRCodeSymbolType[ScannerQRCodeSymbolType["ScannerQRCode_ADDON"] = 1792] = "ScannerQRCode_ADDON";
})(ScannerQRCodeSymbolType || (ScannerQRCodeSymbolType = {}));
export var ScannerQRCodeConfigType;
(function (ScannerQRCodeConfigType) {
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_ENABLE"] = 0] = "ScannerQRCode_CFG_ENABLE";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_ADD_CHECK"] = 1] = "ScannerQRCode_CFG_ADD_CHECK";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_EMIT_CHECK"] = 2] = "ScannerQRCode_CFG_EMIT_CHECK";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_ASCII"] = 3] = "ScannerQRCode_CFG_ASCII";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_BINARY"] = 4] = "ScannerQRCode_CFG_BINARY";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_NUM"] = 5] = "ScannerQRCode_CFG_NUM";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_MIN_LEN"] = 32] = "ScannerQRCode_CFG_MIN_LEN";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_MAX_LEN"] = 33] = "ScannerQRCode_CFG_MAX_LEN";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_UNCERTAINTY"] = 64] = "ScannerQRCode_CFG_UNCERTAINTY";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_POSITION"] = 128] = "ScannerQRCode_CFG_POSITION";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_TEST_INVERTED"] = 129] = "ScannerQRCode_CFG_TEST_INVERTED";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_X_DENSITY"] = 256] = "ScannerQRCode_CFG_X_DENSITY";
    ScannerQRCodeConfigType[ScannerQRCodeConfigType["ScannerQRCode_CFG_Y_DENSITY"] = 257] = "ScannerQRCode_CFG_Y_DENSITY";
})(ScannerQRCodeConfigType || (ScannerQRCodeConfigType = {}));
export var ScannerQRCodeOrientation;
(function (ScannerQRCodeOrientation) {
    ScannerQRCodeOrientation[ScannerQRCodeOrientation["ScannerQRCode_ORIENT_UNKNOWN"] = -1] = "ScannerQRCode_ORIENT_UNKNOWN";
    ScannerQRCodeOrientation[ScannerQRCodeOrientation["ScannerQRCode_ORIENT_UP"] = 0] = "ScannerQRCode_ORIENT_UP";
    ScannerQRCodeOrientation[ScannerQRCodeOrientation["ScannerQRCode_ORIENT_RIGHT"] = 1] = "ScannerQRCode_ORIENT_RIGHT";
    ScannerQRCodeOrientation[ScannerQRCodeOrientation["ScannerQRCode_ORIENT_DOWN"] = 2] = "ScannerQRCode_ORIENT_DOWN";
    ScannerQRCodeOrientation[ScannerQRCodeOrientation["ScannerQRCode_ORIENT_LEFT"] = 3] = "ScannerQRCode_ORIENT_LEFT";
})(ScannerQRCodeOrientation || (ScannerQRCodeOrientation = {}));
class ScannerQRCodeTypePointer {
    constructor(ptr, buf) {
        this.ptr = ptr;
        this.ptr32 = ptr >> 2;
        this.buf = buf;
        this.HEAP8 = new Int8Array(buf);
        this.HEAPU32 = new Uint32Array(buf);
        this.HEAP32 = new Int32Array(buf);
    }
}
class ScannerQRCodeSymbolPtr extends ScannerQRCodeTypePointer {
    get type() {
        return this.HEAPU32[this.ptr32];
    }
    get data() {
        const len = this.HEAPU32[this.ptr32 + 4];
        const ptr = this.HEAPU32[this.ptr32 + 5];
        return Int8Array.from(this.HEAP8.subarray(ptr, ptr + len));
    }
    get points() {
        const len = this.HEAPU32[this.ptr32 + 7];
        const ptr = this.HEAPU32[this.ptr32 + 8];
        const ptr32 = ptr >> 2;
        const res = [];
        for (let i = 0; i < len; ++i) {
            const x = this.HEAP32[ptr32 + i * 2];
            const y = this.HEAP32[ptr32 + i * 2 + 1];
            res.push({ x, y });
        }
        return res;
    }
    get orientation() {
        return this.HEAP32[this.ptr32 + 9];
    }
    get next() {
        const ptr = this.HEAPU32[this.ptr32 + 11];
        if (!ptr)
            return null;
        return new ScannerQRCodeSymbolPtr(ptr, this.buf);
    }
    get time() {
        return this.HEAPU32[this.ptr32 + 13];
    }
    get cacheCount() {
        return this.HEAP32[this.ptr32 + 14];
    }
    get quality() {
        return this.HEAP32[this.ptr32 + 15];
    }
}
class SymbolSetPtr extends ScannerQRCodeTypePointer {
    get head() {
        const ptr = this.HEAPU32[this.ptr32 + 2];
        if (!ptr)
            return null;
        return new ScannerQRCodeSymbolPtr(ptr, this.buf);
    }
}
export class ScannerQRCodeResult {
    constructor(ptr) {
        this.value = '';
        this.type = ptr.type;
        this.typeName = ScannerQRCodeSymbolType[this.type];
        this.data = ptr.data;
        this.points = ptr.points;
        this.orientation = ptr.orientation;
        this.time = ptr.time;
        this.cacheCount = ptr.cacheCount;
        this.quality = ptr.quality;
    }
    static createSymbolsFromPtr(ptr, buf) {
        if (ptr == 0)
            return [];
        const set = new SymbolSetPtr(ptr, buf);
        let symbol = set.head;
        const res = [];
        while (symbol !== null) {
            res.push(new ScannerQRCodeResult(symbol));
            symbol = symbol.next;
        }
        return res;
    }
    decode(encoding) {
        const decoder = new TextDecoder(encoding);
        return decoder.decode(this.data);
    }
}
//# sourceMappingURL=data:application/json;base64,